    public void mergeSort(int[] arr)
    {
        if (arr.Length > 1)
        {
            int mid = arr.Length / 2;
            int[] left = new int[mid];
            int[] right = new int[arr.Length - mid];

            for (int i = 0; i < mid; i++)
            {
                left[i] = arr[i];
            }
            for (int i = mid; i < arr.Length; i++)
            {
                right[i - mid] = arr[i];
            }

            mergeSort(left);
            mergeSort(right);
            merge(arr, left, right);
        }
    }

    private void merge(int[] arr, int[] left, int[] right)
    {
        int i = 0;
        int j = 0;
        int k = 0;
        while (i < left.Length && j < right.Length)
        {
            if (left[i] <= right[j])
            {
                arr[k] = left[i];
                i++;
            }
            else
            {
                arr[k] = right[j];
                j++;
            }
            k++;
        }

        while (i < left.Length)
        {
            arr[k] = left[i];
            i++;
            k++;
        }

        while (j < right.Length)
        {
            arr[k] = right[j];
            j++;
            k++;
        }
    }


    // The merge sort algorithm has O(n log n) time complexity because the running time is a combination of linear and logarithmic time. 
    // The algorithm divides the input data into two halves and recursively sorts each half, then merges the sorted halves back together. 
    // The merge method has a linear time complexity O(n) as it iterates through the entire array once. 
    // The merge sort method has a logarithmic time complexity O(log n) as it divides the input data into halves on each recursive call.
